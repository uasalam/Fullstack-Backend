{
  "stats": {
    "suites": 4,
    "tests": 29,
    "passes": 29,
    "pending": 0,
    "failures": 0,
    "start": "2023-08-16T17:02:36.761Z",
    "end": "2023-08-16T17:02:51.511Z",
    "duration": 14750,
    "testsRegistered": 29,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "c1d7a642-e067-4e25-a442-c321e8731595",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "f2c01810-d407-42bf-8fcd-bf6c915c24be",
          "title": "Common Routes Tests",
          "fullFile": "G:\\Projects\\Salaam Fullstack\\Fullstack Backend\\tests\\basic.tests.js",
          "file": "\\tests\\basic.tests.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return server status",
              "fullTitle": "Common Routes Tests should return server status",
              "timedOut": false,
              "duration": 27,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .get('/')\n  .end((err, res) => {\n    res.should.have.status(200);\n    done();\n  });",
              "err": {},
              "uuid": "ae3f3917-4ccf-4da5-9a99-69c944023afa",
              "parentUUID": "f2c01810-d407-42bf-8fcd-bf6c915c24be",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ae3f3917-4ccf-4da5-9a99-69c944023afa"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 27,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        },
        {
          "uuid": "458df8d8-5d73-4595-af16-fddf92ef7469",
          "title": "Customer Routes Tests Suite",
          "fullFile": "G:\\Projects\\Salaam Fullstack\\Fullstack Backend\\tests\\customer.tests.js",
          "file": "\\tests\\customer.tests.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return customer email needs to be valid",
              "fullTitle": "Customer Routes Tests Suite should return customer email needs to be valid",
              "timedOut": false,
              "duration": 42,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post(api+'/register')\n  .send(mock.mockFalseObject)\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal('\"email\" must be a valid email',res.body.Error,err)\n    done();\n});",
              "err": {},
              "uuid": "6e968291-67d8-405e-84b6-16fa9cf1ce22",
              "parentUUID": "458df8d8-5d73-4595-af16-fddf92ef7469",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return customer created message as success",
              "fullTitle": "Customer Routes Tests Suite should return customer created message as success",
              "timedOut": false,
              "duration": 2715,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post(api+'/registration')\n  .send(mock.mockObject)\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(\"success\",res.body.message,err)\n    done();\n});",
              "err": {},
              "uuid": "45f5723e-a274-423f-a7e5-d83c01fa6614",
              "parentUUID": "458df8d8-5d73-4595-af16-fddf92ef7469",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return that email already exists",
              "fullTitle": "Customer Routes Tests Suite should return that email already exists",
              "timedOut": false,
              "duration": 320,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post(api+'/registration')\n  .send(mock.mockObject)\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(\"Email Already Exists!\",res.body.Error,err)\n    done();\n});",
              "err": {},
              "uuid": "cb3f7af9-e6dc-4700-870f-995b346d7009",
              "parentUUID": "458df8d8-5d73-4595-af16-fddf92ef7469",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return customer login as success",
              "fullTitle": "Customer Routes Tests Suite should return customer login as success",
              "timedOut": false,
              "duration": 355,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post('/api/auth/login')\n  .send({ email : mock.mockLoginObject.email , password : mock.mockLoginObject.password , type : mock.mockLoginObject.type})\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(\"tester122@gmail.com\",res.body.email,err)\n    done();\n});",
              "err": {},
              "uuid": "1a1f3f1d-6144-4e71-a9c3-70d19a0dd5bf",
              "parentUUID": "458df8d8-5d73-4595-af16-fddf92ef7469",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return customer login as Incorrect Username or Password",
              "fullTitle": "Customer Routes Tests Suite should return customer login as Incorrect Username or Password",
              "timedOut": false,
              "duration": 318,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post('/api/auth/login')\n  .send({ email : mock.mockFalseLoginObject.email , password : mock.mockFalseLoginObject.password , type : mock.mockFalseLoginObject.type})\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(\"Email or Password is Incorrect!\",res.body.Error,err)\n    done();\n});",
              "err": {},
              "uuid": "3fd3df00-0365-4581-bff8-58cbd8c4c227",
              "parentUUID": "458df8d8-5d73-4595-af16-fddf92ef7469",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the customer information",
              "fullTitle": "Customer Routes Tests Suite should return the customer information",
              "timedOut": false,
              "duration": 283,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post(api+'/get/id')\n  .send({email : \"tester122@gmail.com\"})\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(mock.findObject.first_name,res.body.first_name,err)\n    chai.assert.equal(mock.findObject.last_name,res.body.last_name,err)\n    chai.assert.equal(mock.findObject.nic,res.body.nic,err)\n    chai.assert.equal(mock.findObject.dob,res.body.dob,err)\n    chai.assert.equal(mock.findObject.email,res.body.email,err)\n    chai.assert.equal(mock.findObject.mobile_no,res.body.mobile_no,err)\n    chai.assert.equal(mock.findObject.address,res.body.address,err)\n    chai.assert.equal(mock.findObject.access,res.body.access,err)\n    chai.assert.equal(mock.findObject.url,res.body.url,err)\n    done();\n});",
              "err": {},
              "uuid": "5de71d68-f6aa-415c-bd6e-fb61835ca817",
              "parentUUID": "458df8d8-5d73-4595-af16-fddf92ef7469",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update customer details and return success",
              "fullTitle": "Customer Routes Tests Suite should update customer details and return success",
              "timedOut": false,
              "duration": 358,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post(api+'/update/id')\n  .send(mock.updateObject)\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(\"success\",res.body.message,err)\n    done();\n});",
              "err": {},
              "uuid": "bac0fe4f-9dd6-4c62-9715-de53d63707ac",
              "parentUUID": "458df8d8-5d73-4595-af16-fddf92ef7469",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return that email needs to be valid",
              "fullTitle": "Customer Routes Tests Suite should return that email needs to be valid",
              "timedOut": false,
              "duration": 214,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post(api+'/update/id')\n  .send(mock.updateFalseObject)\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal('\"mobile_no\" length must be at least 10 characters long',res.body.Error,err)\n    done();\n});",
              "err": {},
              "uuid": "d46b6a6d-ef77-42aa-87ce-0209bc6debc4",
              "parentUUID": "458df8d8-5d73-4595-af16-fddf92ef7469",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update customer Password and return success",
              "fullTitle": "Customer Routes Tests Suite should update customer Password and return success",
              "timedOut": false,
              "duration": 996,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post(api+'/update/password')\n  .send({ email : \"tester122@gmail.com\" , old_password : \"tester123\" , new_password : \"tester1234\" , retype_password : \"tester1234\"})\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(\"success\",res.body.message,err)\n    done();\n});",
              "err": {},
              "uuid": "7c632b32-d99f-47e8-9421-2474e510eef7",
              "parentUUID": "458df8d8-5d73-4595-af16-fddf92ef7469",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return customer Old Password is not valid",
              "fullTitle": "Customer Routes Tests Suite should return customer Old Password is not valid",
              "timedOut": false,
              "duration": 424,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post(api+'/update/password')\n  .send({ email : \"tester122@gmail.com\" , old_password : \"tester12345\" , new_password : \"tester1234\" , retype_password : \"tester1234\"})\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(\"Please Enter the Valid Old Password\",res.body.Error,err)\n    done();\n});",
              "err": {},
              "uuid": "a1483ce8-2d37-4943-8360-8a339f1b6867",
              "parentUUID": "458df8d8-5d73-4595-af16-fddf92ef7469",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete customer record that was created",
              "fullTitle": "Customer Routes Tests Suite should delete customer record that was created",
              "timedOut": false,
              "duration": 429,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post(api+'/delete/id')\n  .send({email : \"tester122@gmail.com\"})\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(\"success\",res.body.message,err)\n    done();\n});",
              "err": {},
              "uuid": "1a920853-487f-4369-ac7f-633a09dd8fa5",
              "parentUUID": "458df8d8-5d73-4595-af16-fddf92ef7469",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "6e968291-67d8-405e-84b6-16fa9cf1ce22",
            "45f5723e-a274-423f-a7e5-d83c01fa6614",
            "cb3f7af9-e6dc-4700-870f-995b346d7009",
            "1a1f3f1d-6144-4e71-a9c3-70d19a0dd5bf",
            "3fd3df00-0365-4581-bff8-58cbd8c4c227",
            "5de71d68-f6aa-415c-bd6e-fb61835ca817",
            "bac0fe4f-9dd6-4c62-9715-de53d63707ac",
            "d46b6a6d-ef77-42aa-87ce-0209bc6debc4",
            "7c632b32-d99f-47e8-9421-2474e510eef7",
            "a1483ce8-2d37-4943-8360-8a339f1b6867",
            "1a920853-487f-4369-ac7f-633a09dd8fa5"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 6454,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        },
        {
          "uuid": "14ddb13a-7d83-4b68-894f-9c6ac1d86ad9",
          "title": "Employee Routes Tests Suite",
          "fullFile": "G:\\Projects\\Salaam Fullstack\\Fullstack Backend\\tests\\employee.tests.js",
          "file": "\\tests\\employee.tests.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return customer email needs to be valid",
              "fullTitle": "Employee Routes Tests Suite should return customer email needs to be valid",
              "timedOut": false,
              "duration": 12,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post(api+'/register')\n  .send(mock.mockFalseObject)\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal('\"email\" must be a valid email',res.body.Error,err)\n    done();\n});",
              "err": {},
              "uuid": "e35ad423-de8c-45c1-80db-6711237e79ad",
              "parentUUID": "14ddb13a-7d83-4b68-894f-9c6ac1d86ad9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return employee created message as success",
              "fullTitle": "Employee Routes Tests Suite should return employee created message as success",
              "timedOut": false,
              "duration": 779,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post(api+'/register')\n  .send(mock.mockObject)\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(\"success\",res.body.message,err)\n    done();\n});",
              "err": {},
              "uuid": "eb4d5cf3-de23-4f3a-81fc-b7d6e009dd97",
              "parentUUID": "14ddb13a-7d83-4b68-894f-9c6ac1d86ad9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return that email already exists",
              "fullTitle": "Employee Routes Tests Suite should return that email already exists",
              "timedOut": false,
              "duration": 394,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post(api+'/register')\n  .send(mock.mockObject)\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(\"Email Already Exists!\",res.body.Error,err)\n    done();\n});",
              "err": {},
              "uuid": "b4abd7dc-8bb2-4e78-b0ea-8020d94aea1f",
              "parentUUID": "14ddb13a-7d83-4b68-894f-9c6ac1d86ad9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return employee login as success",
              "fullTitle": "Employee Routes Tests Suite should return employee login as success",
              "timedOut": false,
              "duration": 428,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post('/api/auth/login')\n  .send({ email : mock.mockLoginObject.email , password : mock.mockLoginObject.password , type : mock.mockLoginObject.type})\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(\"tester122@gmail.com\",res.body.email,err)\n    done();\n});",
              "err": {},
              "uuid": "aabf65b1-1e54-4483-b365-31bae3275296",
              "parentUUID": "14ddb13a-7d83-4b68-894f-9c6ac1d86ad9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return employee login as Incorrect Username or Password",
              "fullTitle": "Employee Routes Tests Suite should return employee login as Incorrect Username or Password",
              "timedOut": false,
              "duration": 475,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post('/api/auth/login')\n  .send({ email : mock.mockFalseLoginObject.email , password : mock.mockFalseLoginObject.password , type : mock.mockFalseLoginObject.type})\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(\"Email or Password is Incorrect!\",res.body.Error,err)\n    done();\n});",
              "err": {},
              "uuid": "c8ff5962-89a4-4eaf-a7c0-b214de9b2b4a",
              "parentUUID": "14ddb13a-7d83-4b68-894f-9c6ac1d86ad9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the customer information",
              "fullTitle": "Employee Routes Tests Suite should return the customer information",
              "timedOut": false,
              "duration": 401,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post(api+'/get/id')\n  .send({email : \"tester122@gmail.com\"})\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(mock.findObject.first_name,res.body.first_name,err)\n    chai.assert.equal(mock.findObject.last_name,res.body.last_name,err)\n    chai.assert.equal(mock.findObject.nic,res.body.nic,err)\n    chai.assert.equal(mock.findObject.dob,res.body.dob,err)\n    chai.assert.equal(mock.findObject.email,res.body.email,err)\n    chai.assert.equal(mock.findObject.mobile_no,res.body.mobile_no,err)\n    chai.assert.equal(mock.findObject.address,res.body.address,err)\n    chai.assert.equal(mock.findObject.access,res.body.access,err)\n    chai.assert.equal(mock.findObject.type,res.body.type,err)\n    chai.assert.equal(mock.findObject.url,res.body.url,err)\n    done();\n});",
              "err": {},
              "uuid": "8fd707d5-172e-4261-8ef6-257acd8017c1",
              "parentUUID": "14ddb13a-7d83-4b68-894f-9c6ac1d86ad9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update customer details and return success",
              "fullTitle": "Employee Routes Tests Suite should update customer details and return success",
              "timedOut": false,
              "duration": 503,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post(api+'/update/id')\n  .send(mock.updateObject)\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(\"success\",res.body.message,err)\n    done();\n});",
              "err": {},
              "uuid": "85f2419e-20ac-4b03-bfcf-7c469af7473c",
              "parentUUID": "14ddb13a-7d83-4b68-894f-9c6ac1d86ad9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return that email needs to be valid",
              "fullTitle": "Employee Routes Tests Suite should return that email needs to be valid",
              "timedOut": false,
              "duration": 13,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post(api+'/update/id')\n  .send(mock.updateFalseObject)\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal('\"mobile_no\" length must be at least 10 characters long',res.body.Error,err)\n    done();\n});",
              "err": {},
              "uuid": "652857f3-2ac0-4727-9465-652229703c27",
              "parentUUID": "14ddb13a-7d83-4b68-894f-9c6ac1d86ad9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update customer Password and return success",
              "fullTitle": "Employee Routes Tests Suite should update customer Password and return success",
              "timedOut": false,
              "duration": 1369,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post(api+'/update/password')\n  .send({ email : \"tester122@gmail.com\" , old_password : \"tester123\" , new_password : \"tester1234\" , retype_password : \"tester1234\"})\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(\"success\",res.body.message,err)\n    done();\n});",
              "err": {},
              "uuid": "06467b7e-5fd1-4d49-8159-77903787dfae",
              "parentUUID": "14ddb13a-7d83-4b68-894f-9c6ac1d86ad9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return customer Old Password is not valid",
              "fullTitle": "Employee Routes Tests Suite should return customer Old Password is not valid",
              "timedOut": false,
              "duration": 477,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post(api+'/update/password')\n  .send({ email : \"tester122@gmail.com\" , old_password : \"tester12345\" , new_password : \"tester1234\" , retype_password : \"tester1234\"})\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(\"Please Enter the Valid Old Password\",res.body.Error,err)\n    done();\n});",
              "err": {},
              "uuid": "a1a055fe-627c-4d75-935c-dca1c5082c36",
              "parentUUID": "14ddb13a-7d83-4b68-894f-9c6ac1d86ad9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete customer record that was created",
              "fullTitle": "Employee Routes Tests Suite should delete customer record that was created",
              "timedOut": false,
              "duration": 420,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post(api+'/delete/id')\n  .send({email : \"tester122@gmail.com\"})\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(\"success\",res.body.message,err)\n    done();\n});",
              "err": {},
              "uuid": "362d4805-9910-4ba9-a6fe-e0dc45ee104c",
              "parentUUID": "14ddb13a-7d83-4b68-894f-9c6ac1d86ad9",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "e35ad423-de8c-45c1-80db-6711237e79ad",
            "eb4d5cf3-de23-4f3a-81fc-b7d6e009dd97",
            "b4abd7dc-8bb2-4e78-b0ea-8020d94aea1f",
            "aabf65b1-1e54-4483-b365-31bae3275296",
            "c8ff5962-89a4-4eaf-a7c0-b214de9b2b4a",
            "8fd707d5-172e-4261-8ef6-257acd8017c1",
            "85f2419e-20ac-4b03-bfcf-7c469af7473c",
            "652857f3-2ac0-4727-9465-652229703c27",
            "06467b7e-5fd1-4d49-8159-77903787dfae",
            "a1a055fe-627c-4d75-935c-dca1c5082c36",
            "362d4805-9910-4ba9-a6fe-e0dc45ee104c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 5271,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        },
        {
          "uuid": "9b8e1f35-b3b3-4577-944d-1a9595ef8951",
          "title": "Order Routes Tests Suite",
          "fullFile": "G:\\Projects\\Salaam Fullstack\\Fullstack Backend\\tests\\order.tests.js",
          "file": "\\tests\\order.tests.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return Order created message as success",
              "fullTitle": "Order Routes Tests Suite should return Order created message as success",
              "timedOut": false,
              "duration": 449,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post(api+'/create')\n  .send(mock.mockObject)\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(\"success\",res.body.message,err)\n    done();\n});",
              "err": {},
              "uuid": "3d85ba32-4d7c-420a-abd7-c04703d10309",
              "parentUUID": "9b8e1f35-b3b3-4577-944d-1a9595ef8951",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the Order information",
              "fullTitle": "Order Routes Tests Suite should return the Order information",
              "timedOut": false,
              "duration": 483,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post(api+'/get/id')\n  .send({id : \"Test_O-23443933\"})\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(mock.findObject.customer_email,res.body.customer_email,err)\n    chai.assert.equal(mock.findObject.total,res.body.total,err)\n    done();\n});",
              "err": {},
              "uuid": "292f5817-1b02-45b4-acbd-912ef33ce957",
              "parentUUID": "9b8e1f35-b3b3-4577-944d-1a9595ef8951",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return all the Orders of the Customer",
              "fullTitle": "Order Routes Tests Suite should return all the Orders of the Customer",
              "timedOut": false,
              "duration": 518,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post(api+'/get')\n  .send({email : \"tester122@gmail.com\"})\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(1,res.body.length,err)\n    done();\n});",
              "err": {},
              "uuid": "23b2e718-7c97-4f50-99bd-cf2af2d3acdc",
              "parentUUID": "9b8e1f35-b3b3-4577-944d-1a9595ef8951",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update order status and return success message",
              "fullTitle": "Order Routes Tests Suite should update order status and return success message",
              "timedOut": false,
              "duration": 517,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post(api+'/update/status')\n  .send({id : \"Test_O-23443933\" , status : \"in progress\"})\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(\"success\",res.body.message,err)\n    done();\n});",
              "err": {},
              "uuid": "50c33f4d-978e-41e7-a4fb-31f1edd3b950",
              "parentUUID": "9b8e1f35-b3b3-4577-944d-1a9595ef8951",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update order details and return success message",
              "fullTitle": "Order Routes Tests Suite should update order details and return success message",
              "timedOut": false,
              "duration": 525,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post(api+'/update/status')\n  .send(mock.updateObject)\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(\"success\",res.body.message,err)\n    done();\n});",
              "err": {},
              "uuid": "53322925-93aa-4db0-b5b5-eea957d56369",
              "parentUUID": "9b8e1f35-b3b3-4577-944d-1a9595ef8951",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete cart record that was created",
              "fullTitle": "Order Routes Tests Suite should delete cart record that was created",
              "timedOut": false,
              "duration": 473,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post(api+'/delete/id')\n  .send({id : \"Test_O-23443933\"})\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(\"success\",res.body.message,err)\n    done();\n});",
              "err": {},
              "uuid": "f277d21d-854f-4461-9089-0ff1e4a8b134",
              "parentUUID": "9b8e1f35-b3b3-4577-944d-1a9595ef8951",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "3d85ba32-4d7c-420a-abd7-c04703d10309",
            "292f5817-1b02-45b4-acbd-912ef33ce957",
            "23b2e718-7c97-4f50-99bd-cf2af2d3acdc",
            "50c33f4d-978e-41e7-a4fb-31f1edd3b950",
            "53322925-93aa-4db0-b5b5-eea957d56369",
            "f277d21d-854f-4461-9089-0ff1e4a8b134"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2965,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 0
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}