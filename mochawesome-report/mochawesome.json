{
  "stats": {
    "suites": 4,
    "tests": 29,
    "passes": 29,
    "pending": 0,
    "failures": 0,
    "start": "2023-08-17T05:28:28.947Z",
    "end": "2023-08-17T05:28:34.869Z",
    "duration": 5922,
    "testsRegistered": 29,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "695df9cc-368e-4c60-ad0b-6a2a937f639b",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "2f7d801f-385c-4eb9-b78f-e953f6bfbf33",
          "title": "Common Routes Tests",
          "fullFile": "G:\\Projects\\Salaam Fullstack\\Fullstack Backend\\tests\\basic.tests.js",
          "file": "\\tests\\basic.tests.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return server status",
              "fullTitle": "Common Routes Tests should return server status",
              "timedOut": false,
              "duration": 34,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .get('/')\n  .end((err, res) => {\n    res.should.have.status(200);\n    done();\n  });",
              "err": {},
              "uuid": "36997186-2d64-46fd-83e4-85194f40ff54",
              "parentUUID": "2f7d801f-385c-4eb9-b78f-e953f6bfbf33",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "36997186-2d64-46fd-83e4-85194f40ff54"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 34,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        },
        {
          "uuid": "41760caf-914b-40ee-a6bf-d91026ebd2c8",
          "title": "Customer Routes Tests Suite",
          "fullFile": "G:\\Projects\\Salaam Fullstack\\Fullstack Backend\\tests\\customer.tests.js",
          "file": "\\tests\\customer.tests.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return customer email needs to be valid",
              "fullTitle": "Customer Routes Tests Suite should return customer email needs to be valid",
              "timedOut": false,
              "duration": 129,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post(api+'/register')\n  .send(mock.mockFalseObject)\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal('\"email\" must be a valid email',res.body.Error,err)\n    done();\n});",
              "err": {},
              "uuid": "227ff71c-ac15-4bf6-b8b9-768af2f5188d",
              "parentUUID": "41760caf-914b-40ee-a6bf-d91026ebd2c8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return customer created message as success",
              "fullTitle": "Customer Routes Tests Suite should return customer created message as success",
              "timedOut": false,
              "duration": 1541,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post(api+'/registration')\n  .send(mock.mockObject)\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(\"success\",res.body.message,err)\n    done();\n});",
              "err": {},
              "uuid": "1161faac-4a9c-41c5-a016-8ab146b9a15b",
              "parentUUID": "41760caf-914b-40ee-a6bf-d91026ebd2c8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return that email already exists",
              "fullTitle": "Customer Routes Tests Suite should return that email already exists",
              "timedOut": false,
              "duration": 125,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post(api+'/registration')\n  .send(mock.mockObject)\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(\"Email Already Exists!\",res.body.Error,err)\n    done();\n});",
              "err": {},
              "uuid": "6619e0f3-d4f1-41a4-ab6d-30b5316ed0b7",
              "parentUUID": "41760caf-914b-40ee-a6bf-d91026ebd2c8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return customer login as success",
              "fullTitle": "Customer Routes Tests Suite should return customer login as success",
              "timedOut": false,
              "duration": 287,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post('/api/auth/login')\n  .send({ email : mock.mockLoginObject.email , password : mock.mockLoginObject.password , type : mock.mockLoginObject.type})\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(\"tester122@gmail.com\",res.body.email,err)\n    done();\n});",
              "err": {},
              "uuid": "b25dbfa7-9a0a-4826-8370-f1232b472e95",
              "parentUUID": "41760caf-914b-40ee-a6bf-d91026ebd2c8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return customer login as Incorrect Username or Password",
              "fullTitle": "Customer Routes Tests Suite should return customer login as Incorrect Username or Password",
              "timedOut": false,
              "duration": 200,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post('/api/auth/login')\n  .send({ email : mock.mockFalseLoginObject.email , password : mock.mockFalseLoginObject.password , type : mock.mockFalseLoginObject.type})\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(\"Email or Password is Incorrect!\",res.body.Error,err)\n    done();\n});",
              "err": {},
              "uuid": "df2108b7-1bf8-4f28-9754-c6858e31df32",
              "parentUUID": "41760caf-914b-40ee-a6bf-d91026ebd2c8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the customer information",
              "fullTitle": "Customer Routes Tests Suite should return the customer information",
              "timedOut": false,
              "duration": 119,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post(api+'/get/id')\n  .send({email : \"tester122@gmail.com\"})\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(mock.findObject.first_name,res.body.first_name,err)\n    chai.assert.equal(mock.findObject.last_name,res.body.last_name,err)\n    chai.assert.equal(mock.findObject.nic,res.body.nic,err)\n    chai.assert.equal(mock.findObject.dob,res.body.dob,err)\n    chai.assert.equal(mock.findObject.email,res.body.email,err)\n    chai.assert.equal(mock.findObject.mobile_no,res.body.mobile_no,err)\n    chai.assert.equal(mock.findObject.address,res.body.address,err)\n    chai.assert.equal(mock.findObject.access,res.body.access,err)\n    chai.assert.equal(mock.findObject.url,res.body.url,err)\n    done();\n});",
              "err": {},
              "uuid": "8dd19ff2-338a-4bb6-89d2-3339be39b77c",
              "parentUUID": "41760caf-914b-40ee-a6bf-d91026ebd2c8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update customer details and return success",
              "fullTitle": "Customer Routes Tests Suite should update customer details and return success",
              "timedOut": false,
              "duration": 130,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post(api+'/update/id')\n  .send(mock.updateObject)\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(\"success\",res.body.message,err)\n    done();\n});",
              "err": {},
              "uuid": "b186319a-8818-46da-a585-9df9ad0234d5",
              "parentUUID": "41760caf-914b-40ee-a6bf-d91026ebd2c8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return that email needs to be valid",
              "fullTitle": "Customer Routes Tests Suite should return that email needs to be valid",
              "timedOut": false,
              "duration": 13,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post(api+'/update/id')\n  .send(mock.updateFalseObject)\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal('\"mobile_no\" length must be at least 10 characters long',res.body.Error,err)\n    done();\n});",
              "err": {},
              "uuid": "6cbd7dda-0c71-4504-a2af-a530ec7be87d",
              "parentUUID": "41760caf-914b-40ee-a6bf-d91026ebd2c8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update customer Password and return success",
              "fullTitle": "Customer Routes Tests Suite should update customer Password and return success",
              "timedOut": false,
              "duration": 375,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post(api+'/update/password')\n  .send({ email : \"tester122@gmail.com\" , old_password : \"tester123\" , new_password : \"tester1234\" , retype_password : \"tester1234\"})\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(\"success\",res.body.message,err)\n    done();\n});",
              "err": {},
              "uuid": "4d90d2cc-62b8-4d25-9dbf-11af8ae63960",
              "parentUUID": "41760caf-914b-40ee-a6bf-d91026ebd2c8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return customer Old Password is not valid",
              "fullTitle": "Customer Routes Tests Suite should return customer Old Password is not valid",
              "timedOut": false,
              "duration": 197,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post(api+'/update/password')\n  .send({ email : \"tester122@gmail.com\" , old_password : \"tester12345\" , new_password : \"tester1234\" , retype_password : \"tester1234\"})\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(\"Please Enter the Valid Old Password\",res.body.Error,err)\n    done();\n});",
              "err": {},
              "uuid": "2af489ce-b73f-4167-b016-158c0619be22",
              "parentUUID": "41760caf-914b-40ee-a6bf-d91026ebd2c8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete customer record that was created",
              "fullTitle": "Customer Routes Tests Suite should delete customer record that was created",
              "timedOut": false,
              "duration": 123,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post(api+'/delete/id')\n  .send({email : \"tester122@gmail.com\"})\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(\"success\",res.body.message,err)\n    done();\n});",
              "err": {},
              "uuid": "f26785b9-0373-445d-b4c9-f7ea6ba58d99",
              "parentUUID": "41760caf-914b-40ee-a6bf-d91026ebd2c8",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "227ff71c-ac15-4bf6-b8b9-768af2f5188d",
            "1161faac-4a9c-41c5-a016-8ab146b9a15b",
            "6619e0f3-d4f1-41a4-ab6d-30b5316ed0b7",
            "b25dbfa7-9a0a-4826-8370-f1232b472e95",
            "df2108b7-1bf8-4f28-9754-c6858e31df32",
            "8dd19ff2-338a-4bb6-89d2-3339be39b77c",
            "b186319a-8818-46da-a585-9df9ad0234d5",
            "6cbd7dda-0c71-4504-a2af-a530ec7be87d",
            "4d90d2cc-62b8-4d25-9dbf-11af8ae63960",
            "2af489ce-b73f-4167-b016-158c0619be22",
            "f26785b9-0373-445d-b4c9-f7ea6ba58d99"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3239,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        },
        {
          "uuid": "8a2a0155-41c9-4ef6-8a75-0fb93e9adb80",
          "title": "Employee Routes Tests Suite",
          "fullFile": "G:\\Projects\\Salaam Fullstack\\Fullstack Backend\\tests\\employee.tests.js",
          "file": "\\tests\\employee.tests.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return customer email needs to be valid",
              "fullTitle": "Employee Routes Tests Suite should return customer email needs to be valid",
              "timedOut": false,
              "duration": 12,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post(api+'/register')\n  .send(mock.mockFalseObject)\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal('\"email\" must be a valid email',res.body.Error,err)\n    done();\n});",
              "err": {},
              "uuid": "5b1ab771-3b4a-4eea-aa92-07d291dcd1d5",
              "parentUUID": "8a2a0155-41c9-4ef6-8a75-0fb93e9adb80",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return employee created message as success",
              "fullTitle": "Employee Routes Tests Suite should return employee created message as success",
              "timedOut": false,
              "duration": 321,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post(api+'/register')\n  .send(mock.mockObject)\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(\"success\",res.body.message,err)\n    done();\n});",
              "err": {},
              "uuid": "eb105786-a46f-49b5-87d6-67aa15b3a168",
              "parentUUID": "8a2a0155-41c9-4ef6-8a75-0fb93e9adb80",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return that email already exists",
              "fullTitle": "Employee Routes Tests Suite should return that email already exists",
              "timedOut": false,
              "duration": 119,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post(api+'/register')\n  .send(mock.mockObject)\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(\"Email Already Exists!\",res.body.Error,err)\n    done();\n});",
              "err": {},
              "uuid": "8c607776-98f0-4ccc-ac18-efae6e2b0918",
              "parentUUID": "8a2a0155-41c9-4ef6-8a75-0fb93e9adb80",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return employee login as success",
              "fullTitle": "Employee Routes Tests Suite should return employee login as success",
              "timedOut": false,
              "duration": 196,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post('/api/auth/login')\n  .send({ email : mock.mockLoginObject.email , password : mock.mockLoginObject.password , type : mock.mockLoginObject.type})\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(\"tester122@gmail.com\",res.body.email,err)\n    done();\n});",
              "err": {},
              "uuid": "7aae0ec0-814b-4db7-99d9-620301cf41ef",
              "parentUUID": "8a2a0155-41c9-4ef6-8a75-0fb93e9adb80",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return employee login as Incorrect Username or Password",
              "fullTitle": "Employee Routes Tests Suite should return employee login as Incorrect Username or Password",
              "timedOut": false,
              "duration": 195,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post('/api/auth/login')\n  .send({ email : mock.mockFalseLoginObject.email , password : mock.mockFalseLoginObject.password , type : mock.mockFalseLoginObject.type})\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(\"Email or Password is Incorrect!\",res.body.Error,err)\n    done();\n});",
              "err": {},
              "uuid": "870ceee8-c6cf-454b-a61d-3204e1275929",
              "parentUUID": "8a2a0155-41c9-4ef6-8a75-0fb93e9adb80",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the customer information",
              "fullTitle": "Employee Routes Tests Suite should return the customer information",
              "timedOut": false,
              "duration": 123,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post(api+'/get/id')\n  .send({email : \"tester122@gmail.com\"})\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(mock.findObject.first_name,res.body.first_name,err)\n    chai.assert.equal(mock.findObject.last_name,res.body.last_name,err)\n    chai.assert.equal(mock.findObject.nic,res.body.nic,err)\n    chai.assert.equal(mock.findObject.dob,res.body.dob,err)\n    chai.assert.equal(mock.findObject.email,res.body.email,err)\n    chai.assert.equal(mock.findObject.mobile_no,res.body.mobile_no,err)\n    chai.assert.equal(mock.findObject.address,res.body.address,err)\n    chai.assert.equal(mock.findObject.access,res.body.access,err)\n    chai.assert.equal(mock.findObject.type,res.body.type,err)\n    chai.assert.equal(mock.findObject.url,res.body.url,err)\n    done();\n});",
              "err": {},
              "uuid": "543fa76e-2b26-4d96-a03b-f9eb66221da8",
              "parentUUID": "8a2a0155-41c9-4ef6-8a75-0fb93e9adb80",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update customer details and return success",
              "fullTitle": "Employee Routes Tests Suite should update customer details and return success",
              "timedOut": false,
              "duration": 119,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post(api+'/update/id')\n  .send(mock.updateObject)\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(\"success\",res.body.message,err)\n    done();\n});",
              "err": {},
              "uuid": "7f617ea0-3686-49fc-aeb0-f3514bc86c93",
              "parentUUID": "8a2a0155-41c9-4ef6-8a75-0fb93e9adb80",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return that email needs to be valid",
              "fullTitle": "Employee Routes Tests Suite should return that email needs to be valid",
              "timedOut": false,
              "duration": 12,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post(api+'/update/id')\n  .send(mock.updateFalseObject)\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal('\"mobile_no\" length must be at least 10 characters long',res.body.Error,err)\n    done();\n});",
              "err": {},
              "uuid": "9575f886-d01f-4834-895f-cebde6217751",
              "parentUUID": "8a2a0155-41c9-4ef6-8a75-0fb93e9adb80",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update customer Password and return success",
              "fullTitle": "Employee Routes Tests Suite should update customer Password and return success",
              "timedOut": false,
              "duration": 406,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post(api+'/update/password')\n  .send({ email : \"tester122@gmail.com\" , old_password : \"tester123\" , new_password : \"tester1234\" , retype_password : \"tester1234\"})\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(\"success\",res.body.message,err)\n    done();\n});",
              "err": {},
              "uuid": "512738a8-b2f1-4243-b618-4d65d002978a",
              "parentUUID": "8a2a0155-41c9-4ef6-8a75-0fb93e9adb80",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return customer Old Password is not valid",
              "fullTitle": "Employee Routes Tests Suite should return customer Old Password is not valid",
              "timedOut": false,
              "duration": 196,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post(api+'/update/password')\n  .send({ email : \"tester122@gmail.com\" , old_password : \"tester12345\" , new_password : \"tester1234\" , retype_password : \"tester1234\"})\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(\"Please Enter the Valid Old Password\",res.body.Error,err)\n    done();\n});",
              "err": {},
              "uuid": "4aebad15-2267-4d76-a2af-99acf5a4f656",
              "parentUUID": "8a2a0155-41c9-4ef6-8a75-0fb93e9adb80",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete customer record that was created",
              "fullTitle": "Employee Routes Tests Suite should delete customer record that was created",
              "timedOut": false,
              "duration": 122,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post(api+'/delete/id')\n  .send({email : \"tester122@gmail.com\"})\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(\"success\",res.body.message,err)\n    done();\n});",
              "err": {},
              "uuid": "52a10a61-5077-4bf3-ab01-e349cd843638",
              "parentUUID": "8a2a0155-41c9-4ef6-8a75-0fb93e9adb80",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "5b1ab771-3b4a-4eea-aa92-07d291dcd1d5",
            "eb105786-a46f-49b5-87d6-67aa15b3a168",
            "8c607776-98f0-4ccc-ac18-efae6e2b0918",
            "7aae0ec0-814b-4db7-99d9-620301cf41ef",
            "870ceee8-c6cf-454b-a61d-3204e1275929",
            "543fa76e-2b26-4d96-a03b-f9eb66221da8",
            "7f617ea0-3686-49fc-aeb0-f3514bc86c93",
            "9575f886-d01f-4834-895f-cebde6217751",
            "512738a8-b2f1-4243-b618-4d65d002978a",
            "4aebad15-2267-4d76-a2af-99acf5a4f656",
            "52a10a61-5077-4bf3-ab01-e349cd843638"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1821,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        },
        {
          "uuid": "9766227e-93e2-4b07-8e28-92ef7747a1d5",
          "title": "Order Routes Tests Suite",
          "fullFile": "G:\\Projects\\Salaam Fullstack\\Fullstack Backend\\tests\\order.tests.js",
          "file": "\\tests\\order.tests.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return Order created message as success",
              "fullTitle": "Order Routes Tests Suite should return Order created message as success",
              "timedOut": false,
              "duration": 144,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post(api+'/create')\n  .send(mock.mockObject)\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(\"success\",res.body.message,err)\n    done();\n});",
              "err": {},
              "uuid": "87b04ac0-c23d-4dbb-8912-bbefbf0fefd6",
              "parentUUID": "9766227e-93e2-4b07-8e28-92ef7747a1d5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the Order information",
              "fullTitle": "Order Routes Tests Suite should return the Order information",
              "timedOut": false,
              "duration": 115,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post(api+'/get/id')\n  .send({id : \"Test_O-23443933\"})\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(mock.findObject.customer_email,res.body.customer_email,err)\n    chai.assert.equal(mock.findObject.total,res.body.total,err)\n    done();\n});",
              "err": {},
              "uuid": "78803fc5-de51-4c87-a1f0-8ef916d204d6",
              "parentUUID": "9766227e-93e2-4b07-8e28-92ef7747a1d5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return all the Orders of the Customer",
              "fullTitle": "Order Routes Tests Suite should return all the Orders of the Customer",
              "timedOut": false,
              "duration": 120,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post(api+'/get')\n  .send({email : \"tester122@gmail.com\"})\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(1,res.body.length,err)\n    done();\n});",
              "err": {},
              "uuid": "75fcea45-1cc9-4059-a6d6-08bbf658a92a",
              "parentUUID": "9766227e-93e2-4b07-8e28-92ef7747a1d5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update order status and return success message",
              "fullTitle": "Order Routes Tests Suite should update order status and return success message",
              "timedOut": false,
              "duration": 118,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post(api+'/update/status')\n  .send({id : \"Test_O-23443933\" , status : \"in progress\"})\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(\"success\",res.body.message,err)\n    done();\n});",
              "err": {},
              "uuid": "832f916f-69a2-41ee-9b45-408e5debc1b3",
              "parentUUID": "9766227e-93e2-4b07-8e28-92ef7747a1d5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update order details and return success message",
              "fullTitle": "Order Routes Tests Suite should update order details and return success message",
              "timedOut": false,
              "duration": 120,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post(api+'/update/status')\n  .send(mock.updateObject)\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(\"success\",res.body.message,err)\n    done();\n});",
              "err": {},
              "uuid": "dd9982b1-3018-4d58-8d1a-ace5b1efdd24",
              "parentUUID": "9766227e-93e2-4b07-8e28-92ef7747a1d5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete cart record that was created",
              "fullTitle": "Order Routes Tests Suite should delete cart record that was created",
              "timedOut": false,
              "duration": 119,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post(api+'/delete/id')\n  .send({id : \"Test_O-23443933\"})\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(\"success\",res.body.message,err)\n    done();\n});",
              "err": {},
              "uuid": "a1ec02bf-a7f9-4b6e-a3b6-a8abec5d6b47",
              "parentUUID": "9766227e-93e2-4b07-8e28-92ef7747a1d5",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "87b04ac0-c23d-4dbb-8912-bbefbf0fefd6",
            "78803fc5-de51-4c87-a1f0-8ef916d204d6",
            "75fcea45-1cc9-4059-a6d6-08bbf658a92a",
            "832f916f-69a2-41ee-9b45-408e5debc1b3",
            "dd9982b1-3018-4d58-8d1a-ace5b1efdd24",
            "a1ec02bf-a7f9-4b6e-a3b6-a8abec5d6b47"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 736,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 0
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}